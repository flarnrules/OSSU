(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2;

(* test strings *)
val str1 = "Bradley";
val str_list1 = ["Alex", "Brad", "Bradley", "Mark", "Emily", "Emma"];
val str2 = "Fred";
val str3 = "Jeff";
val str_list2 = ["Fred", "Fredrick"];
val str_list3 = ["Elizabeth", "Betty"];
val str_list4 = ["Freddie", "Fred", "F"];
val str_list5 = ["Jeff", "Jeffrey"];
val str_list6 = ["Geoff", "Jeff", "Jeffrey"];

(* put your solutions for problem 1 here *)
(* 1a - all_except_option *)
fun all_except_option (str : string ,lst : string list) =
    let
	fun helper [] = NONE
	  | helper (x::xs) =
	    if same_string(x, str) then
		SOME(xs)
	    else
		case helper xs of
		    NONE => NONE
		  | SOME(rest) => SOME(x::rest)
    in
	helper lst
    end;

(* 1b - get_substitutions1 *)
fun get_substitutions1 (substitutions : string list list, s : string) =
    let
	fun helper ([], acc) = acc
	  | helper (x::xs, acc) =
	    case all_except_option (s, x) of
		NONE => helper(xs, acc)
	      | SOME(lst) => helper(xs, acc @ lst)
    in
	helper(substitutions, [])
    end;

(* 1c - get_substitutions2 *)
fun get_substitutions2 (substitutions : string list list, s : string) =
    let
	fun prepend_sublist([], acc) = acc
	  | prepend_sublist (x::xs, acc)  = prepend_sublist(xs, x::acc)
	fun helper([],acc) = List.rev acc
	  | helper (x::xs, acc) =
	    case all_except_option(s, x) of
		NONE => helper(xs, acc)
	      | SOME(lst) => helper(xs, prepend_sublist(lst, acc))
    in
	helper(substitutions, [])
    end;

(* 1d - similar_names *)
(* first define fullname datatype *)
type fullname = {first: string, middle: string, last: string};

fun similar_names (substitutions: string list list, {first, middle, last}: fullname) =
    let
	fun make_fullnames(subst_first_names, acc) =
	    case subst_first_names of
		[] => acc
	      | x::xs => make_fullnames(xs, acc @ [{first=x, middle=middle, last=last}])
	val subst_first_names = get_substitutions2(substitutions, first)
    in
	make_fullnames(subst_first_names, [{first=first, middle=middle, last=last}])
    end;





(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades;
datatype rank = Jack | Queen | King | Ace | Num of int ;
type card = suit * rank;

datatype color = Red | Black;
datatype move = Discard of card | Draw ;

exception IllegalMove;

(* put your solutions for problem 2 here *)
